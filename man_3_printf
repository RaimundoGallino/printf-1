.TH "" "Linux Programmer's Manual" Manual _printf
.SH
NAME
_printf \- print format

.SH
SYNOPSIS
.TP
.B #include "holberton.h"
.TP
.B int _printf(const char *format, ...);
.TP
.B _printf FORMAT [\fB\ ARGUMENT \fB\]

.SH
DESCRIPTION
_printf print ARGUMENT to standrard output acording to FORMAT established previously or execute acroding to the options. If we want to specify a format to print our argument we must introduce the "%" specifier
.TP
.B Return Value
.IP
If _printf successfuly ends, the fuction returns the number of characters printed (excluding the string  ending null character)

If _printf has an error in the operation, the function retunrs a negative value

.SH
FORMAT SPECIFIERS
.TP
.B %c
.IP
print the argument as a single character
.TP
.B %s
.IP
print the argument as a string. A sigle character will be considered as a string
.TP
.BR %i ", " %d
.IP
%d specifies the type of variable as decimal and %i specifies the type as integer. In usage terms, there is no difference in printf() function output while printing a number using %d or %i
.TP
.B %b
.IP
print the given unsigned integer in binary
.TP
.B %R
.IP
prints the argument as a string in ROT13
.TP
.B %r
.IP
prints the argument as a string in reverse
.TP
.BR %x ", " %X
.IP
%x Print the unsigned ints in hexadecimal in lowecase from the argument, %X Print the unsigned ints in hexadecimal in uppercase from the argument

.SH
EXAMPLES

To print a string "Hello Holberton":

.SAMPLE
 #include "holberton.h"
 /**
 * main - main function of program
 * Return: always 0
 */
 int main(void)
 {
 	_printf("Hello Holberton");
 	return (0);
 }

Output: Hello Holberton
.ESAMPLE


.SH
AUTHORS
Diego Varela, Raimundo Gallino
